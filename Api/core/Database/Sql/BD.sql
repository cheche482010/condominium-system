CREATE DATABASE IF NOT EXISTS `condominium-system`;
USE `condominium-system`;

CREATE TABLE websites (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    shortcode VARCHAR(10) NOT NULL UNIQUE,
    tagid VARCHAR(4) NOT NULL UNIQUE,
    descripcion TEXT,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE condominios (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    id_website BIGINT,
    nombre VARCHAR(255) NOT NULL,
    deuda DECIMAL(10, 2) DEFAULT 0,
    alicuota DECIMAL(10, 2),
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (id_website) REFERENCES websites(id) ON DELETE SET NULL ON UPDATE CASCADE
);

CREATE TABLE bancos (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    codigo VARCHAR(20) NOT NULL UNIQUE,
    nombre VARCHAR(255) NOT NULL,   
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE tipos_de_pago (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    codigo VARCHAR(20) NOT NULL,
    nombre VARCHAR(255) NOT NULL,
    descripcion TEXT,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE tipo_gasto (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(50) NOT NULL,
    descripcion VARCHAR(255),
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE roles (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(50) NOT NULL UNIQUE,
    descripcion TEXT,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE permisos (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(50) NOT NULL,
    descripcion TEXT,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE usuarios (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    id_website BIGINT,
    id_condominio BIGINT NOT NULL,
    id_rol INT NOT NULL,
    nombre VARCHAR(255) NOT NULL,
    apellido VARCHAR(255) NOT NULL,
    cedula BIGINT NOT NULL UNIQUE,
    phone VARCHAR(20) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    user_password VARCHAR(255) NOT NULL,
    token TEXT NOT NULL,
    is_active BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (id_condominio) REFERENCES condominios(id),
    FOREIGN KEY (id_rol) REFERENCES roles(id),
    FOREIGN KEY (id_website) REFERENCES websites(id) ON DELETE SET NULL ON UPDATE CASCADE
);

CREATE TABLE bitacora (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    id_usuario BIGINT,
    id_website BIGINT,
    fecha DATE NOT NULL,
    hora TIME NOT NULL,
    accion VARCHAR(255) NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id) ON DELETE SET NULL ON UPDATE CASCADE,
    FOREIGN KEY (id_website) REFERENCES websites(id) ON DELETE SET NULL ON UPDATE CASCADE
);

CREATE TABLE pagos (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    id_website BIGINT,
    id_banco BIGINT,
    id_tipo_pago BIGINT,
    monto DECIMAL(10, 2) NOT NULL,
    fecha DATE NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (id_website) REFERENCES websites(id) ON DELETE SET NULL ON UPDATE CASCADE,
    FOREIGN KEY (id_banco) REFERENCES bancos(id) ON DELETE SET NULL ON UPDATE CASCADE,
    FOREIGN KEY (id_tipo_pago) REFERENCES tipos_de_pago(id) ON DELETE SET NULL ON UPDATE CASCADE
);

CREATE TABLE gastos (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    id_website BIGINT,
    id_tipo BIGINT NOT NULL,
    concepto VARCHAR(255) NOT NULL,
    monto DECIMAL(10, 2) NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (id_website) REFERENCES websites(id) ON DELETE SET NULL ON UPDATE CASCADE,
    FOREIGN KEY (id_tipo) REFERENCES tipo_gasto(id) ON DELETE RESTRICT ON UPDATE CASCADE
);

CREATE TABLE gastos_condominio (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    id_gastos BIGINT,
    id_condominio BIGINT,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (id_gastos) REFERENCES gastos(id),
    FOREIGN KEY (id_condominio) REFERENCES condominios(id)
);

CREATE TABLE pago_gasto (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    id_pago BIGINT,
    id_gasto_condominio BIGINT,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (id_pago) REFERENCES pagos(id),
    FOREIGN KEY (id_gasto_condominio) REFERENCES gastos_condominio(id)
);

CREATE TABLE usuarios_roles (
    id_usuario BIGINT NOT NULL,
    id_rol INT NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    PRIMARY KEY (id_usuario, id_rol),
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id),
    FOREIGN KEY (id_rol) REFERENCES roles(id)
);

CREATE TABLE roles_permisos (
    id_rol INT NOT NULL,
    id_permiso INT NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    PRIMARY KEY (id_rol, id_permiso),
    FOREIGN KEY (id_rol) REFERENCES roles(id),
    FOREIGN KEY (id_permiso) REFERENCES permisos(id)
);
